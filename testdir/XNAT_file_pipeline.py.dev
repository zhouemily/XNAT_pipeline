#!/usr/bin/env python

import os
import cairosvg
from PIL import Image, ImageDraw, ImageFont
from PIL import Image, ImageDraw, ImageFont


class Pipeline:
    def __init__(self):
        self.name=''
        self.data=[] 

    def svg_to_png(svg_file, png_file):
        # Convert SVG files to PNG
        with open(svg_file, 'rb') as svg:
            cairosvg.svg2png(file_obj=svg, write_to=png_file)

    def svg_to_png(svg_file, png_file, width, height):
        # Function to resize and convert SVG files to PNG 
        cairosvg.svg2png(file_obj=open(svg_file, 'rb'), write_to=png_file, output_width=width, output_height=height)

    def check_file_exist(file_path):
        """
        Check if a file exists and print the result.
        Args:
            file_path (str): The path to the file to be checked.
        """
        if os.path.exists(file_path):
            print(f"The file '{file_path}' exists.")
        else:
            print(f"The file '{file_path}' does not exist.")


class Util:
    def __init__(self):
        self.data=[]
        self.root_path=""
        self.cups_id=""
        self.png_fname=''
        self.svg_fname1=''
        self.svg_fname2=''
        self.cvs_fname=''
        self.fname1_check=''
        self.fname2_check=''
        self.debug=0
        self.help=0
        self.verbose=0

    def process_args(self):
        """
        This function process user inputs and set object attributes
        Input:  None (process global variable: sys.argv[1])
        Output: None (assign values to attributes: root path, cups_id, etc)
        Return:   None
        """
        x=sys.argv[1:]
        zlist=["-h","-d","-id","-f","-D","-v"]
        if len(x)==0:
            self.help=1
        else:
            if "-id" in x:
                i=x.index("-id")
                self.cups_id=x[i+1]
            else:
                tprint("cups id is needed\n")
                exit(1)
            
            if "-D" in x:
                self.verbose=1
                self.debug=1
            if "-d" in x:
                i=x.index("-d")
                self.root_path=x[i+1]
            else:
                self.root_path="/System/Volumes/Data/Volumes/CUPS/PipelineOutputs/bids/derivatives/"

            if "-fpng"
                i=x.index("-fpng")
                self.png_fname=x[i+1]
            else:
                self.png_fname=self.root_path+"fsqc/screenshots/"+cups_id+"/"+cups_id+'.png'

            if "-fsvg1"
                i=x.index("-fsvg1")
                self.svg_fname1=x[i+1]
            else:
                self.png_fname=self.root_path+"fmriprep/"+cups_id+"/figures/"+cups_id+'_ses-A_task-rest_dir-PA_run-1_desc-carpetplot_bold.svg'
            if "-fsvg2"
                i=x.index("-fsvg2")
                self.svg_fname2=x[i+1]
            else:
                self.png_fname=self.root_path+"qsiprep/"+cups_id+"/figures/"+cups_id+'_ses-A_run-1_carpetplot.svg'
      
            #set default:
            self.fname_check1=self.root_path+"fmriprep/"+cups_id+"/figures/"+cups_id+"_ses-A_task-rest_dir-PA_run-1_desc-sdc_bold.svg"
            self.fname_check2=self.root_path+"qsiprep/"+cups_id+"/figures/"+cups_id+"_ses-A_run-1_desc-sdc_b0.svg"
            if self.debug:
                print(self.cups_id+"\n")
                print(self.png_fname+"\n")
                print(self.svg_fname1+"\n")
                print(self.svg_fname2+"\n")
                print(self.fname_check1+"\n")
                print(self.fname_check2+"\n")

    def run_cmd(self):
        """
        This is a function wrapper using python subprocess module
        Input: cmd => command line input
        Output: None
        Return: out, err, proc.returncode
        """
        proc=sp.Popen(cmd, stdout=sp.PIPE,stderr=sp.PIPE,shell=True)
        out, err=proc.communicate()
        out=out.decode("utf8")
        err=err.decode("utf8")
        return out, err, proc.returncode
           
###############################################################
global tprint

def tprint(*args):
    tempa = ' '.join(str(a) for a in args)
    print(str(datetime.now().strftime('%Y-%m-%d %H:%M%S')) + " " + tempa)        

def main:
    print("Program Started")
    # Load the PNG and resized SVGs

png_image = Image.open(png_file_path)

# Define the new dimensions (width and height) you want for the resized image
new_width = int(0.8 * png_image.width)  # Adjust to your desired width
new_height = int(0.8 * png_image.height)  # Adjust to your desired height

# Resize the image
resized_image = png_image.resize((new_width, new_height))

# Save the resized image
resized_image.save('resized_image.png')

# Resize and convert the first SVG 
svg_to_png(svg_file_path1, 'temp1.png', png_image.width, png_image.height)
image1 = Image.open('temp1.png')

# Resize and convert the second SVG 
svg_to_png(svg_file_path2, 'temp2.png', png_image.width, png_image.height)
image2 = Image.open('temp2.png')

# Determine the size of the stacked image
width = png_image.width
height = png_image.height * 3  # Three times the height of the PNG image

# Create a new image with the determined size
stacked_image = Image.new('RGB', (width, height))

# Paste the PNG and SVG images onto the stacked image
#stacked_image.paste(png_image, (0, 0)) 
stacked_image.paste(resized_image, (300, 0)) 
stacked_image.paste(image1, (0, png_image.height+50))
stacked_image.paste(image2, (0, 2 * png_image.height+50))

#######################################################
# Create a drawing context to add text
draw = ImageDraw.Draw(stacked_image)
# Use a system font and specify the size
font_size = 36  # Adjust the font size as needed
#font = ImageFont.truetype("arial.ttf", font_size)  # Replace "arial.ttf" with your desired font and font path
font = ImageFont.truetype("/System/Library/Fonts/Geneva.ttf", font_size) 

# Specify the position and text to be added
#text_position = (500, png_image.height)  # Adjust the position as needed
text = "add needed text or check mark here"  # Replace with the desired text
#draw.text(text_position, text, fill="white", font=font)

# Calculate the position to center the text horizontally and vertically
##text_width, text_height = draw.textsize(text, font)
x = width / 2
#y = (height - text_height) // 2
y = png_image.height

# Add text to the image at the calculated position
#draw.text((x, y), text, fill="white", font=font)
draw.text((x, y), text, fill="red", font=font) ##first text string
draw.text((x, y+png_image.height+50), text, fill="red", font=font) ##another text position
#################################################

# Save the stacked image
stacked_image.save('stacked_image.png')

# Clean up temporary PNG files
image1.close()
image2.close()

# Clean up temporary files
#os.remove(image1)
#os.remove(image2)

print("Stacked image saved as 'stacked_image.png'")
print("End of Program")
