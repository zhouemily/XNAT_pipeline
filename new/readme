1. Create python script process command-line arguments with argparse module: -i input -o output -d directory, -v verbose -D debug 

The argparse module in Python is a powerful tool for writing command-line interfaces. It makes it easy to parse command-line arguments. 
Below is a Python script that demonstrates how to use argparse to process the command-line arguments you specified: 
-i (input), -o (output), -d (directory), -v (verbose), and -D (debug).

In this updated script:

The required parameter for --input, --output, and --directory is set to False.
Checks are added (if args.input: etc.) to only print information about these arguments if they are provided.
With these changes, the script no longer requires -i, -o, and -d arguments to run. They are now optional, and the script will run even if none, 
some, or all of them are provided. The -v (verbose) and -D (debug) flags remain optional as before.

2. create python script to open file and read the file line by line, and print the lines with special keyword
=============================================
def find_keyword_in_file(file_path, keyword):
    try:
        with open(file_path, 'r') as file:
            for line_number, line in enumerate(file, start=1):
                if keyword in line:
                    print(f"Line {line_number}: {line.strip()}")
    except FileNotFoundError:
        print(f"The file {file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
file_path = 'path_to_your_file.txt'  # Replace with your file path
keyword = 'your_keyword'  # Replace with your keyword

find_keyword_in_file(file_path, keyword)
====================================
